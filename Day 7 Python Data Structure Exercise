Python Data Structure Exercise
________________________________________________________________________________
Exercise 1: Create a list by picking an odd-index items from the first list and even index items from the second
Given two lists, l1 and l2, write a program to create a third list l3 by picking an odd-index element from the list l1 and even index elements from the list l2.

Given:

l1 = [3, 6, 9, 12, 15, 18, 21]
l2 = [4, 8, 12, 16, 20, 24, 28]
Expected Output:
Element at odd-index positions from list one
[6, 12, 18]
Element at even-index positions from list two
[4, 12, 20, 28]

Printing Final third list
[6, 12, 18, 4, 12, 20, 28]


code:
_______________________________________________

l1 = [3, 6, 9, 12, 15, 18, 21]
l2 = [4, 8, 12, 16, 20, 24, 28]

l1 = [l1[x] for x in range(1,len(l1),2)]
l2 = [l2[x] for x in range(0,len(l2),2)]
l3 = l1+l2

print(f'Element at odd-index positions from list one\n{l1}')
print(f'Element at even-index positions from list two\n{l2}')
print(f'Printing Final third list\n{l3}')

_______________________________________________





Exercise 2: Remove and add item in a list
Write a program to remove the item present at index 4 and add it to the 2nd position and at the end of the list.

Given:

list1 = [54, 44, 27, 79, 91, 41]

Expected Output:

List After removing element at index 4  [54, 44, 27, 79, 41]
List after Adding element at index 2  [54, 44, 91, 27, 79, 41]
List after Adding element at last  [54, 44, 91, 27, 79, 41, 91]



code:
_______________________________________________


list1 = [54, 44, 27, 79, 91, 41]

removed = list1.pop(4)
print('List After removing element at index 4',list1)
list1.insert(2, removed)
print('List after Adding element at index 2',list1)
list1.append(removed)
print('List after Adding element at last',list1)

_______________________________________________




Exercise 3: Slice list into 3 equal chunks and reverse each chunk
Given:

sample_list = [11, 45, 8, 23, 14, 12, 78, 45, 89]
Expected Outcome:

Chunk  1 [11, 45, 8]
After reversing it  [8, 45, 11]
Chunk  2 [23, 14, 12]
After reversing it  [12, 14, 23]
Chunk  3 [78, 45, 89]
After reversing it  [89, 45, 78]



code:
_______________________________________________


sample_list = [11, 45, 8, 23, 14, 12, 78, 45, 89]
three_equal_length = len(sample_list)//3
chunk = []
i = 0
while len(sample_list) > i:
    chunk.append(sample_list[i:i+three_equal_length])
    i+=three_equal_length


for i in range(len(chunk)):
    print(f'chunk {i+1}: {chunk[i]}')
    print(f'After reversing it {i+1}:  {reversed(chunk[i])[::-1]}')

_______________________________________________



Exercise 4: Count the occurrence of each element from a list
Write a program to iterate a given list and count the occurrence of each element and create a dictionary to show the count of each element.

Given:

sample_list = [11, 45, 8, 11, 23, 45, 23, 45, 89]
Expected Output:

Printing count of each item   {11: 2, 45: 3, 8: 1, 23: 2, 89: 1}



code:
_______________________________________________


sample_list = [11, 45, 8, 11, 23, 45, 23, 45, 89]
dictonary = {}
ignore = set()
for i in sample_list:
    if i in ignore:
        continue
    else:
        dictonary[i] = sample_list.count(i)
        
print(dictonary)

_______________________________________________




Exercise 5: Create a Python set such that it shows the element from both lists in a pair
Given:

first_list = [2, 3, 4, 5, 6, 7, 8]
second_list = [4, 9, 16, 25, 36, 49, 64]
Expected Output:
Result is  {(6, 36), (8, 64), (4, 16), (5, 25), (3, 9), (7, 49), (2, 4)}


code:
_______________________________________________

first_list = [2, 3, 4, 5, 6, 7, 8]
second_list = [4, 9, 16, 25, 36, 49, 64]
set1= set()
for i in range(len(first_list)):
    set1.add((first_list[i],second_list[i]))

print(set1)


_______________________________________________



Exercise 6: Find the intersection (common) of two sets and remove those elements from the first set

See: Python Set

Given:

first_set = {23, 42, 65, 57, 78, 83, 29}
second_set = {57, 83, 29, 67, 73, 43, 48}
Expected Output:

Intersection is  {57, 83, 29}
First Set after removing common element  {65, 42, 78, 23}


code:
_______________________________________________

first_set = {23, 42, 65, 57, 78, 83, 29}
second_set = {57, 83, 29, 67, 73, 43, 48}

inter = first_set.intersection(second_set)
print('Intersection is ', inter)
for i in inter:
    first_set.remove(i)
print('First Set after removing common element ', first_set)

_______________________________________________





Exercise 7: Checks if one set is a subset or superset of another set. If found, delete all elements from that set

Given:

first_set = {27, 43, 34}
second_set = {34, 93, 22, 27, 43, 53, 48}
Expected Output:

First set is subset of second set - True
Second set is subset of First set -  False

First set is Super set of second set -  False
Second set is Super set of First set -  True

First Set  set()
Second Set  {67, 73, 43, 48, 83, 57, 29}



code:
_______________________________________________

first_set = {27, 43, 34}
second_set = {34, 93, 22, 27, 43, 53, 48}

print('First set is subset of second set -',first_set.issubset(second_set))
print('Second set is subset of First set -',second_set.issubset(first_set),'\n')

print('First set is Super set of second set -',first_set.issuperset(second_set))
print('Second set is Super set of First set -',second_set.issuperset(first_set),'\n')

if first_set.issubset(second_set):
    first_set.clear()
        
if second_set.issubset(first_set):
    second_set.clear()

print('First Set -', first_set)
print('Second Set -', second_set)


_______________________________________________




Exercise 8: Iterate a given list and check if a given element exists as a key’s value in a dictionary. If not, delete it from the list

Given:

roll_number = [47, 64, 69, 37, 76, 83, 95, 97]
sample_dict = {'Jhon':47, 'Emma':69, 'Kelly':76, 'Jason':97}
Expected Outcome:

After removing unwanted elements from list [47, 69, 76, 97]




code:
_______________________________________________

roll_number = [47, 64, 69, 37, 76, 83, 95, 97]
sample_dict = {'Jhon':47, 'Emma':69, 'Kelly':76, 'Jason':97}
temp = roll_number.copy()
for i in temp:
    if i not in sample_dict.values():
        roll_number.remove(i)
print(roll_number)

_______________________________________________





Exercise 9: Get all values from the dictionary and add them to a list but don’t add duplicates
Given:

speed = {'jan': 47, 'feb': 52, 'march': 47, 'April': 44, 'May': 52, 'June': 53, 'july': 54, 'Aug': 44, 'Sept': 54}

Expected Outcome:

[47, 52, 44, 53, 54]



code:
_______________________________________________

speed = {'jan': 47, 'feb': 52, 'march': 47, 'April': 44, 'May': 52, 'June': 53, 'july': 54, 'Aug': 44, 'Sept': 54}
l = []
for i in speed.values():
    if i not in l:
        l.append(i)
print(l)
_______________________________________________






Exercise 10: Remove duplicates from a list and create a tuple and find the minimum and maximum number
Given:

sample_list = [87, 45, 41, 65, 94, 41, 99, 94]
Expected Outcome:

unique items [87, 45, 41, 65, 99]
tuple (87, 45, 41, 65, 99)
min: 41
max: 99



code:
_______________________________________________


sample_list = [87, 45, 41, 65, 94, 41, 99, 94]
tup = tuple(set(sample_list))
min = tup[0]
max = tup[0]
for i in tup:
    if i < min:
        min = i
    elif i > max:
        max = i
print('unique items', list(tup))
print('tuple ', tup)
print('min', min)
print('max', max)

_______________________________________________
